#include "1_frexp.c"

//Prototype
double bare_subtract(double a, double b);

void __bare_parse(double val, uint64_t *lval, uint64_t *lval_sign, uint64_t *lval_expo, uint64_t *lval_frac){
   //Converting to unsigned long for bit pattern
   (*lval) = *((uint64_t*) &val);
   //Extracting the signed bit
   (*lval_sign) = (((*lval)>>30)>>30)>>3;
   //Extracting the exponent and getting rid of sign_bit
   (*lval_expo) = (( ((*lval) & ~(((1l<<30)<<30)<<3)) >>30)>>22);
   //Extracting the fraction (Mantissa)
   (*lval_frac) = ((*lval)<<12)>>12;

   return;
}

double bare_add(double a, double b){
   uint64_t la ;
   uint64_t lb ;
   uint64_t la_sign ;
   uint64_t lb_sign ;
   uint64_t la_expo ;
   uint64_t lb_expo ;
   uint64_t la_frac ;
   uint64_t lb_frac ;
   uint64_t diff_expo = 0;
   uint64_t lc_sign ; 
   uint64_t lc_expo ;
   uint64_t lc_frac ;

   __bare_parse(a, &la, &la_sign, &la_expo, &la_frac);
   __bare_parse(b, &lb, &lb_sign, &lb_expo, &lb_frac);

   lc_sign = la_sign ^ lb_sign;

   printf("la_lf: %#lf\n",*((double*) &la));
   printf("lb_lf: %#lf\n",*((double*) &lb));

   //Take care of the sign
   if(lc_sign){
      if(la_sign){
	 return bare_subtract(-a,b);
	 printf("a sub b\n");
      }else if(lb_sign){
	 return bare_subtract(a,-b);
	 printf("b sub a\n");
      }
   }else {

      //Different Exponential
      if(la_expo > lb_expo){
	 printf("a>b \n");
	 diff_expo = la_expo - lb_expo;
	 lb_frac = (lb_frac | ((1l<<30)<<22) )>>diff_expo;
	 lc_expo = la_expo;
	 lc_frac = la_frac + lb_frac;
	 if( ((1l<<30)<<22) & lc_frac ){
	    lc_expo++;
	    lc_frac &= ~((1l<<30)<<22);
	    lc_frac = lc_frac>>1;
	 }
      }else if(lb_expo > la_expo){
	 printf("b>a \n");
	 diff_expo = lb_expo - la_expo;
	 la_frac = (la_frac | ((1l<<30)<<22) )>>diff_expo;
	 lc_expo = lb_expo;
	 lc_frac = la_frac + lb_frac;
	 if( ((1l<<30)<<22) & lc_frac ){
	    lc_expo++;
	    lc_frac &= ~((1l<<30)<<22);
	    lc_frac = lc_frac>>1;
	 }
	 //Same Exponential
      }else if(lb_expo == la_expo){
	 printf("a=b \n");
	 lc_expo = la_expo;
	 lc_frac = la_frac + lb_frac;
	 if( ((1l<<30)<<22) & lc_frac ){
	    lc_expo++;
	    lc_frac = lc_frac>>1;
	 }
	 lc_expo++;
	 lc_frac = lc_frac>>1;
      }
      //Reconstructing the bit pattern
      //   reconst = (temp_sign<<63) | (temp_expo<<52) | (temp_frac<<0);  
      uint64_t reconst =0; 
      reconst |= (((lc_sign<<30)<<30)<<3);
      reconst |= ((lc_expo<<30)<<22); 
      reconst |= (lc_frac<<0);  
      //Setting the output
      double ret_frac = *((double*) &reconst);  

      return ret_frac; 

   }
}


double bare_subtract(double a, double b){
   uint64_t la ;
   uint64_t lb ;
   uint64_t la_sign ;
   uint64_t lb_sign ;
   uint64_t la_expo ;
   uint64_t lb_expo ;
   uint64_t la_frac ;
   uint64_t lb_frac ;
   uint64_t diff_expo = 0;
   uint64_t lc_sign ; 
   uint64_t lc_expo ;
   uint64_t lc_frac ;

   __bare_parse(a, &la, &la_sign, &la_expo, &la_frac);
   __bare_parse(b, &lb, &lb_sign, &lb_expo, &lb_frac);

   //In case of different sign (+a,-b) or (-a,+b)
   //Basically, just add them and take care of the end result sign
   if(la_sign ^ lb_sign){
      if(lb_sign){
	 printf("bare_sub_b: %#lf, %lf\n", a, b);
	 return bare_add(a,-b);
      }else if(la_sign){
	 printf("bare_sub_a: %#lf, %lf\n", a, b);
	 return ((double)(-1))*bare_add(-a,b);
      }
   }

   //In case of the same sign (+a,+b) or (-a,-b)
   if(la_expo > lb_expo){
      //Use expo of b as a standard
      printf("bare_sub_sa: %#lf, %lf\n", a, b);
      lc_expo = lb_expo;
      //Adjusting to be the same expo
      diff_expo = la_expo - lb_expo;
      la_frac = ( ((1l<<30)<<22) | la_frac)<<diff_expo;
      //printf("la_frac: %#lx\n",la_frac);
      //printf("la_expo: %#lx\n",la_expo);
      lc_frac = la_frac - lb_frac;
      while(!((lc_frac>>diff_expo) & (1l<<30)<<22)){
	 diff_expo--;
      }
      lc_expo += diff_expo;
      lc_frac &= ~((1l<<30)<<22); 
      lc_frac = lc_frac >> diff_expo;
      //	    lc_frac = lc_frac>>1;
   }else if(lb_expo > la_expo){
      lc_expo = la_expo;
      diff_expo = lb_expo - la_expo;
      lb_frac = lb_frac<<diff_expo;
      lb_expo -= diff_expo; 
   }
   //Reconstructing the bit pattern
   //   reconst = (temp_sign<<63) | (temp_expo<<52) | (temp_frac<<0);  
   uint64_t reconst =0; 
   reconst |= (((lc_sign<<30)<<30)<<3);
   reconst |= ((lc_expo<<30)<<22); 
   reconst |= (lc_frac<<0);  
   //Setting the output
   double ret_frac = *((double*) &reconst);  

   return ret_frac; 
}


double bare_multiply(double a, double b){
   uint64_t la ;
   uint64_t lb ;
   uint64_t la_sign ;
   uint64_t lb_sign ;
   uint64_t la_expo ;
   uint64_t lb_expo ;
   uint64_t la_frac ;
   uint64_t lb_frac ;
   uint64_t diff_expo = 0;
   uint64_t lc_sign ; 
   uint64_t lc_expo ;
   uint64_t lc_frac ;
   uint64_t one = ((1l<<30)<<22);
   printf("bare_mult: %#lf, %#lf\n", a,b);
   printf("one: %#lx\n", one);
   __bare_parse(a, &la, &la_sign, &la_expo, &la_frac);
   __bare_parse(b, &lb, &lb_sign, &lb_expo, &lb_frac);

   //Calculating the sign bit
   lc_sign = la_sign ^ lb_sign;

   //Calculating the expo
   lc_expo = la_expo + lb_expo;

   //Convert everything to float (Sorry the rest 30 bits)
   la_frac = ((1l<<23) | (la_frac>>30));
   lb_frac = ((1l<<23) | (lb_frac>>30));

   //Calculating the exponent
   if(la_expo > lb_expo){
      diff_expo = la_expo - lb_expo;
      //lb_frac = lb_frac >> diff_expo;
   }else if (lb_expo > la_expo){
      diff_expo = lb_expo - la_expo;
      //la_frac = la_frac >> diff_expo;
   }

   //Calculating the mantissa
   lc_frac = la_frac * lb_frac;

   printf("lc_frac: %#lx\n",lc_frac);
   printf("one    : %#lx\n",one);

   while( (!(lc_frac & (one>>diff_expo))) && (diff_expo<52)){
      diff_expo++;
   }

   if(diff_expo < 29){//right shift
      lc_frac = lc_frac >> (29-diff_expo);
      lc_frac &= ~(1l<<(29-diff_expo));
   }else{//left shitf
      lc_frac = lc_frac >> (diff_expo-29);
      lc_frac &= ~(1l<<(diff_expo-29));
   }

   //Reconstructing the bit pattern
   //   reconst = (temp_sign<<63) | (temp_expo<<52) | (temp_frac<<0);  
   uint64_t reconst =0; 
   reconst |= (((lc_sign<<30)<<30)<<3);
   reconst |= ((lc_expo<<30)<<22); 
   reconst |= (lc_frac<<0);  
   //Setting the output
   double ret_frac = *((double*) &reconst);  

   return ret_frac; 

}
